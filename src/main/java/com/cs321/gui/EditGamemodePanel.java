/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.cs321.gui;

import java.io.IOException;

import javax.swing.JOptionPane;

import com.cs321.core.GameConfiguration;
import com.cs321.core.GameConfiguration.GameConfigurationBuilder;
import com.cs321.gui.GUIState.PanelName;
import com.cs321.io.IOUtils;

/**
 *
 * @author Hasna
 */
public class EditGamemodePanel extends UpdateableJPanel {

    // The global GUI state
    private GUIState state;

    /**
     * Creates new form EditGamemodePanel
     */
    public EditGamemodePanel(GUIState state) {
        initComponents();

        this.state = state;
    }

    /**
     * Updates the components to reflect the current state
     */
    @Override
    public void updateComponents() {
        fillForm();
    }

    /**
     * Fills the form with the current game configuration
     */
    private void fillForm() {
        GameConfiguration gameConfiguration = state.gameConfigurations.get(state.toEditGameConfigurationIndex);

        NameTextField.setText(gameConfiguration.getName());
        DartsPerRoundTextField.setText(Integer.toString(gameConfiguration.getDartsPerRound()));
        MaximumRoundsTextField.setText(Integer.toString(gameConfiguration.getMaximumRounds()));
        StartingScoreTextField.setText(Integer.toString(gameConfiguration.getStartingScore()));
        OffboardPenaltyTextField.setText(Integer.toString(gameConfiguration.getOffboardPenalty()));

        int[] scoreList = gameConfiguration.getScoreList();
        ScoreTextField1.setText(Integer.toString(scoreList[0]));
        ScoreTextField2.setText(Integer.toString(scoreList[1]));
        ScoreTextField3.setText(Integer.toString(scoreList[2]));
        ScoreTextField4.setText(Integer.toString(scoreList[3]));
        ScoreTextField5.setText(Integer.toString(scoreList[4]));
        ScoreTextField6.setText(Integer.toString(scoreList[5]));
        ScoreTextField7.setText(Integer.toString(scoreList[6]));
        ScoreTextField8.setText(Integer.toString(scoreList[7]));
        ScoreTextField9.setText(Integer.toString(scoreList[8]));
        ScoreTextField10.setText(Integer.toString(scoreList[9]));
        ScoreTextField11.setText(Integer.toString(scoreList[10]));
        ScoreTextField12.setText(Integer.toString(scoreList[11]));
        ScoreTextField13.setText(Integer.toString(scoreList[12]));
        ScoreTextField14.setText(Integer.toString(scoreList[13]));
        ScoreTextField15.setText(Integer.toString(scoreList[14]));
        ScoreTextField16.setText(Integer.toString(scoreList[15]));
        ScoreTextField17.setText(Integer.toString(scoreList[16]));
        ScoreTextField18.setText(Integer.toString(scoreList[17]));
        ScoreTextField19.setText(Integer.toString(scoreList[18]));
        ScoreTextField20.setText(Integer.toString(scoreList[19]));
        ScoreTextFieldBullseye.setText(Integer.toString(scoreList[20]));

        StringBuilder multipliersBuilder = new StringBuilder();
        for (float multiplier : gameConfiguration.getMultipliers()) {
            multipliersBuilder.append(multiplier);
            multipliersBuilder.append(",");
        }
        if (multipliersBuilder.length() > 0) {
            multipliersBuilder.delete(multipliersBuilder.length() - 1, multipliersBuilder.length());
        }
        MultipliersTextField.setText(multipliersBuilder.toString());

        ExactZeroWinCheckBox.setSelected(gameConfiguration.isExactZeroWin());
        SubtractPointsCheckBox.setSelected(gameConfiguration.isSubtractPoints());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        HeaderPanel = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        TitleLabel = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        BodyPanel = new javax.swing.JPanel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        ContentPanel = new javax.swing.JPanel();
        FormScrollPane = new javax.swing.JScrollPane();
        FormPanel = new javax.swing.JPanel();
        FormLabel = new javax.swing.JLabel();
        NameLabel = new javax.swing.JLabel();
        NameTextField = new javax.swing.JTextField();
        DartsPerRoundLabel = new javax.swing.JLabel();
        DartsPerRoundTextField = new javax.swing.JTextField();
        MaximumRoundsLabel = new javax.swing.JLabel();
        MaximumRoundsTextField = new javax.swing.JTextField();
        StartingScoreLabel = new javax.swing.JLabel();
        StartingScoreTextField = new javax.swing.JTextField();
        OffboardPenaltyLabel = new javax.swing.JLabel();
        OffboardPenaltyTextField = new javax.swing.JTextField();
        ScoreListLabel = new javax.swing.JLabel();
        ScoreListDartboardHolderPanel = new javax.swing.JPanel();
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        ScoreListDartboardPanel = new javax.swing.JPanel();
        ScoreTextFieldBullseye = new javax.swing.JTextField();
        ScoreTextField20 = new javax.swing.JTextField();
        ScoreTextField19 = new javax.swing.JTextField();
        ScoreTextField18 = new javax.swing.JTextField();
        ScoreTextField17 = new javax.swing.JTextField();
        ScoreTextField16 = new javax.swing.JTextField();
        ScoreTextField15 = new javax.swing.JTextField();
        ScoreTextField14 = new javax.swing.JTextField();
        ScoreTextField13 = new javax.swing.JTextField();
        ScoreTextField12 = new javax.swing.JTextField();
        ScoreTextField11 = new javax.swing.JTextField();
        ScoreTextField10 = new javax.swing.JTextField();
        ScoreTextField9 = new javax.swing.JTextField();
        ScoreTextField8 = new javax.swing.JTextField();
        ScoreTextField7 = new javax.swing.JTextField();
        ScoreTextField6 = new javax.swing.JTextField();
        ScoreTextField5 = new javax.swing.JTextField();
        ScoreTextField4 = new javax.swing.JTextField();
        ScoreTextField3 = new javax.swing.JTextField();
        ScoreTextField2 = new javax.swing.JTextField();
        ScoreTextField1 = new javax.swing.JTextField();
        ScoreListDartboardLabel = new javax.swing.JLabel();
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        MultipliersTextLabel = new javax.swing.JLabel();
        MultipliersTextField = new javax.swing.JTextField();
        MultipliersHelpLabel = new javax.swing.JLabel();
        ExactZeroWinCheckBox = new javax.swing.JCheckBox();
        SubtractPointsCheckBox = new javax.swing.JCheckBox();
        MenuPanel = new javax.swing.JPanel();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        RestoreButton = new javax.swing.JButton();
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        SaveButton = new javax.swing.JButton();
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        FooterPanel = new javax.swing.JPanel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        BackButton = new javax.swing.JButton();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));

        setMinimumSize(new java.awt.Dimension(1, 1));
        setPreferredSize(new java.awt.Dimension(1, 1));
        setLayout(new java.awt.GridBagLayout());

        HeaderPanel.setMaximumSize(new java.awt.Dimension(65744, 65744));
        HeaderPanel.setMinimumSize(new java.awt.Dimension(1, 1));
        HeaderPanel.setPreferredSize(new java.awt.Dimension(1, 1));
        HeaderPanel.setLayout(new javax.swing.BoxLayout(HeaderPanel, javax.swing.BoxLayout.X_AXIS));
        HeaderPanel.add(filler1);

        TitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        TitleLabel.setText("Edit Gamemode");
        HeaderPanel.add(TitleLabel);
        HeaderPanel.add(filler2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(HeaderPanel, gridBagConstraints);

        BodyPanel.setMinimumSize(new java.awt.Dimension(1, 1));
        BodyPanel.setPreferredSize(new java.awt.Dimension(1, 1));
        BodyPanel.setLayout(new javax.swing.BoxLayout(BodyPanel, javax.swing.BoxLayout.X_AXIS));
        BodyPanel.add(filler5);

        ContentPanel.setMinimumSize(new java.awt.Dimension(1, 1));
        ContentPanel.setPreferredSize(new java.awt.Dimension(1, 1));
        ContentPanel.setLayout(new java.awt.GridBagLayout());

        FormScrollPane.setMinimumSize(new java.awt.Dimension(1, 1));
        FormScrollPane.setPreferredSize(new java.awt.Dimension(1, 1));

        FormPanel.setMinimumSize(new java.awt.Dimension(1, 1));
        FormPanel.setPreferredSize(new java.awt.Dimension(300, 640));
        FormPanel.setLayout(new java.awt.GridBagLayout());

        FormLabel.setText("Leave blanks empty for default values");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(FormLabel, gridBagConstraints);

        NameLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        NameLabel.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(NameLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(NameTextField, gridBagConstraints);

        DartsPerRoundLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        DartsPerRoundLabel.setText("Darts Per Round:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(DartsPerRoundLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 64;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 12);
        FormPanel.add(DartsPerRoundTextField, gridBagConstraints);

        MaximumRoundsLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        MaximumRoundsLabel.setText("Maximum Rounds:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 12, 4, 4);
        FormPanel.add(MaximumRoundsLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(MaximumRoundsTextField, gridBagConstraints);

        StartingScoreLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        StartingScoreLabel.setText("Starting Score:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(StartingScoreLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 64;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 12);
        FormPanel.add(StartingScoreTextField, gridBagConstraints);

        OffboardPenaltyLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        OffboardPenaltyLabel.setText("Offboard Penalty:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 12, 4, 4);
        FormPanel.add(OffboardPenaltyLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(OffboardPenaltyTextField, gridBagConstraints);

        ScoreListLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ScoreListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ScoreListLabel.setText("Score List");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(16, 4, 4, 4);
        FormPanel.add(ScoreListLabel, gridBagConstraints);

        ScoreListDartboardHolderPanel.setLayout(new javax.swing.BoxLayout(ScoreListDartboardHolderPanel, javax.swing.BoxLayout.X_AXIS));
        ScoreListDartboardHolderPanel.add(filler10);

        ScoreListDartboardPanel.setMaximumSize(new java.awt.Dimension(300, 300));
        ScoreListDartboardPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ScoreTextFieldBullseye.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextFieldBullseye.setText("50");
        ScoreListDartboardPanel.add(ScoreTextFieldBullseye, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 130, 40, 40));

        ScoreTextField20.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField20.setText("20");
        ScoreListDartboardPanel.add(ScoreTextField20, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 40, 40));

        ScoreTextField19.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField19.setText("19");
        ScoreListDartboardPanel.add(ScoreTextField19, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 260, 40, 40));

        ScoreTextField18.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField18.setText("18");
        ScoreListDartboardPanel.add(ScoreTextField18, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, 40, 40));

        ScoreTextField17.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField17.setText("17");
        ScoreListDartboardPanel.add(ScoreTextField17, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 40, 40));

        ScoreTextField16.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField16.setText("16");
        ScoreListDartboardPanel.add(ScoreTextField16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 40, 40));

        ScoreTextField15.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField15.setText("15");
        ScoreListDartboardPanel.add(ScoreTextField15, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 210, 40, 40));

        ScoreTextField14.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField14.setText("14");
        ScoreListDartboardPanel.add(ScoreTextField14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 40, 40));

        ScoreTextField13.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField13.setText("13");
        ScoreListDartboardPanel.add(ScoreTextField13, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, 40, 40));

        ScoreTextField12.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField12.setText("12");
        ScoreListDartboardPanel.add(ScoreTextField12, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 40, 40));

        ScoreTextField11.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField11.setText("11");
        ScoreListDartboardPanel.add(ScoreTextField11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 40, 40));

        ScoreTextField10.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField10.setText("10");
        ScoreListDartboardPanel.add(ScoreTextField10, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 170, 40, 40));

        ScoreTextField9.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField9.setText("9");
        ScoreListDartboardPanel.add(ScoreTextField9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 40, 40));

        ScoreTextField8.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField8.setText("8");
        ScoreListDartboardPanel.add(ScoreTextField8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 40, 40));

        ScoreTextField7.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField7.setText("7");
        ScoreListDartboardPanel.add(ScoreTextField7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 40, 40));

        ScoreTextField6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField6.setText("6");
        ScoreListDartboardPanel.add(ScoreTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 40, 40));

        ScoreTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField5.setText("5");
        ScoreListDartboardPanel.add(ScoreTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 0, 40, 40));

        ScoreTextField4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField4.setText("4");
        ScoreListDartboardPanel.add(ScoreTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 40, 40));

        ScoreTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField3.setText("3");
        ScoreListDartboardPanel.add(ScoreTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, 40, 40));

        ScoreTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField2.setText("2");
        ScoreListDartboardPanel.add(ScoreTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 250, 40, 40));

        ScoreTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ScoreTextField1.setText("1");
        ScoreListDartboardPanel.add(ScoreTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 0, 40, 40));

        ScoreListDartboardLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dartboard_300x300.png"))); // NOI18N
        ScoreListDartboardPanel.add(ScoreListDartboardLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        ScoreListDartboardHolderPanel.add(ScoreListDartboardPanel);
        ScoreListDartboardHolderPanel.add(filler11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 16, 8);
        FormPanel.add(ScoreListDartboardHolderPanel, gridBagConstraints);

        MultipliersTextLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        MultipliersTextLabel.setText("Multipliers:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(MultipliersTextLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 64;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(MultipliersTextField, gridBagConstraints);

        MultipliersHelpLabel.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        MultipliersHelpLabel.setText("3 comma separated numbers for bigger to smaller rings");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(MultipliersHelpLabel, gridBagConstraints);

        ExactZeroWinCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ExactZeroWinCheckBox.setText("Exact Zero Win");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(ExactZeroWinCheckBox, gridBagConstraints);

        SubtractPointsCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        SubtractPointsCheckBox.setText("Subtract Points");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        FormPanel.add(SubtractPointsCheckBox, gridBagConstraints);

        FormScrollPane.setViewportView(FormPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 8.0;
        ContentPanel.add(FormScrollPane, gridBagConstraints);

        MenuPanel.setMinimumSize(new java.awt.Dimension(1, 1));
        MenuPanel.setPreferredSize(new java.awt.Dimension(1, 1));
        MenuPanel.setLayout(new javax.swing.BoxLayout(MenuPanel, javax.swing.BoxLayout.LINE_AXIS));
        MenuPanel.add(filler7);

        RestoreButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        RestoreButton.setText("Restore");
        RestoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestoreButtonActionPerformed(evt);
            }
        });
        MenuPanel.add(RestoreButton);
        MenuPanel.add(filler8);

        SaveButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        MenuPanel.add(SaveButton);
        MenuPanel.add(filler9);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        ContentPanel.add(MenuPanel, gridBagConstraints);

        BodyPanel.add(ContentPanel);
        BodyPanel.add(filler6);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        add(BodyPanel, gridBagConstraints);

        FooterPanel.setMinimumSize(new java.awt.Dimension(1, 1));
        FooterPanel.setPreferredSize(new java.awt.Dimension(1, 1));
        FooterPanel.setLayout(new javax.swing.BoxLayout(FooterPanel, javax.swing.BoxLayout.X_AXIS));
        FooterPanel.add(filler3);

        BackButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        FooterPanel.add(BackButton);
        FooterPanel.add(filler4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(FooterPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        String nameText = NameTextField.getText().trim();
        String dartsPerRoundText = DartsPerRoundTextField.getText().trim();
        String maximumRoundsText = MaximumRoundsTextField.getText().trim();
        String startingScoreText = StartingScoreTextField.getText().trim();
        String offboardPenaltyText = OffboardPenaltyTextField.getText().trim();
        String multipliersText = MultipliersTextField.getText().trim();
        boolean exactZeroWin = ExactZeroWinCheckBox.isSelected();
        boolean subtractPoints = SubtractPointsCheckBox.isSelected();

        GameConfigurationBuilder gameConfigurationBuilder = new GameConfigurationBuilder();
        
        // Parse name
        if (nameText.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Name can not be empty or whitespace", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        gameConfigurationBuilder.withName(nameText);
        
        // Parse darts per round
        if (!dartsPerRoundText.isEmpty()) {
            int dartsPerRound;

            try {
                dartsPerRound = Integer.parseInt(dartsPerRoundText);
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Darts per round must be an integer", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            gameConfigurationBuilder.withDartsPerRound(dartsPerRound);
        }

        // Parse maximum rounds
        if (!maximumRoundsText.isEmpty()) {
            int maximumRounds;

            try {
                maximumRounds = Integer.parseInt(maximumRoundsText);
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Maximum rounds must be an integer", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            gameConfigurationBuilder.withMaximumRounds(maximumRounds);
        }

        // Parse starting score
        if (!startingScoreText.isEmpty()) {
            int startingScore;

            try {
                startingScore = Integer.parseInt(startingScoreText);
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Starting score must be an integer", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            gameConfigurationBuilder.withStartingScore(startingScore);
        }

        // Parse offboard penalty
        if (!offboardPenaltyText.isEmpty()) {
            int offboardPenalty;

            try {
                offboardPenalty = Integer.parseInt(offboardPenaltyText);
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Offboard penalty must be an integer", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            gameConfigurationBuilder.withOffboardPenalty(offboardPenalty);
        }

        // Parse score list
        int[] scoreList = new GameConfiguration().getScoreList();

        if (!ScoreTextField1.getText().isEmpty()) {
            try {
                scoreList[0] = Integer.parseInt(ScoreTextField1.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField2.getText().isEmpty()) {
            try {
                scoreList[1] = Integer.parseInt(ScoreTextField2.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField3.getText().isEmpty()) {
            try {
                scoreList[2] = Integer.parseInt(ScoreTextField3.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField4.getText().isEmpty()) {
            try {
                scoreList[3] = Integer.parseInt(ScoreTextField4.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField5.getText().isEmpty()) {
            try {
                scoreList[4] = Integer.parseInt(ScoreTextField5.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField6.getText().isEmpty()) {
            try {
                scoreList[5] = Integer.parseInt(ScoreTextField6.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField7.getText().isEmpty()) {
            try {
                scoreList[6] = Integer.parseInt(ScoreTextField7.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField8.getText().isEmpty()) {
            try {
                scoreList[7] = Integer.parseInt(ScoreTextField8.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField9.getText().isEmpty()) {
            try {
                scoreList[8] = Integer.parseInt(ScoreTextField9.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField10.getText().isEmpty()) {
            try {
                scoreList[9] = Integer.parseInt(ScoreTextField10.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField11.getText().isEmpty()) {
            try {
                scoreList[10] = Integer.parseInt(ScoreTextField11.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField12.getText().isEmpty()) {
            try {
                scoreList[11] = Integer.parseInt(ScoreTextField12.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField13.getText().isEmpty()) {
            try {
                scoreList[12] = Integer.parseInt(ScoreTextField13.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField14.getText().isEmpty()) {
            try {
                scoreList[13] = Integer.parseInt(ScoreTextField14.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField15.getText().isEmpty()) {
            try {
                scoreList[14] = Integer.parseInt(ScoreTextField15.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField16.getText().isEmpty()) {
            try {
                scoreList[15] = Integer.parseInt(ScoreTextField16.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField17.getText().isEmpty()) {
            try {
                scoreList[16] = Integer.parseInt(ScoreTextField17.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField18.getText().isEmpty()) {
            try {
                scoreList[17] = Integer.parseInt(ScoreTextField18.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField19.getText().isEmpty()) {
            try {
                scoreList[18] = Integer.parseInt(ScoreTextField19.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextField20.getText().isEmpty()) {
            try {
                scoreList[19] = Integer.parseInt(ScoreTextField20.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (!ScoreTextFieldBullseye.getText().isEmpty()) {
            try {
                scoreList[20] = Integer.parseInt(ScoreTextFieldBullseye.getText().trim());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Scores must be integers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        gameConfigurationBuilder.withScoreList(scoreList);

        // Parse multipliers
        if (!multipliersText.isEmpty()) {
            String[] multipliersSplit = multipliersText.split(",");

            if (multipliersSplit.length != 3) {
                JOptionPane.showMessageDialog(null, "Multipliers must contain 3 numbers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            float[] multipliers = new float[3];

            for (int i = 0; i < 3; i++) {
                try {
                    multipliers[i] = Float.parseFloat(multipliersSplit[i].trim());
                } catch(NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Multipliers must contain 3 numbers", "Input Format Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
        }

        gameConfigurationBuilder.withExactZeroWin(exactZeroWin);
        gameConfigurationBuilder.withSubtractPoints(subtractPoints);
        int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you want to overwrite this gamemode?", "Save Gamemode", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (confirmation == JOptionPane.YES_OPTION) {
            GameConfiguration oldGameConfiguration = state.gameConfigurations.get(state.toEditGameConfigurationIndex);
            GameConfiguration newGameConfiguration = gameConfigurationBuilder.build();
            newGameConfiguration.setId(oldGameConfiguration.getId());
            
            try {
                IOUtils.deleteGameConfiguration(oldGameConfiguration);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Could not delete old gamemode file", "Save Gamemode Error", JOptionPane.ERROR_MESSAGE);
            }

            try {
                IOUtils.saveGameConfiguration(newGameConfiguration);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Could not save gamemode file", "Save Gamemode Error", JOptionPane.ERROR_MESSAGE);
            }

            state.gameConfigurations.remove(state.toEditGameConfigurationIndex);
            state.gameConfigurations.add(state.toEditGameConfigurationIndex, newGameConfiguration);

            state.panels.get(PanelName.ViewGamemodesPanel).updateComponents();
            state.contentPaneCardLayout.show(state.contentPane, PanelName.ViewGamemodesPanel.toString());
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        state.panels.get(PanelName.ViewGamemodesPanel).updateComponents();
        state.contentPaneCardLayout.show(state.contentPane, PanelName.ViewGamemodesPanel.toString());
    }//GEN-LAST:event_BackButtonActionPerformed

    private void RestoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestoreButtonActionPerformed
        fillForm();
    }//GEN-LAST:event_RestoreButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JPanel BodyPanel;
    private javax.swing.JPanel ContentPanel;
    private javax.swing.JLabel DartsPerRoundLabel;
    private javax.swing.JTextField DartsPerRoundTextField;
    private javax.swing.JCheckBox ExactZeroWinCheckBox;
    private javax.swing.JPanel FooterPanel;
    private javax.swing.JLabel FormLabel;
    private javax.swing.JPanel FormPanel;
    private javax.swing.JScrollPane FormScrollPane;
    private javax.swing.JPanel HeaderPanel;
    private javax.swing.JLabel MaximumRoundsLabel;
    private javax.swing.JTextField MaximumRoundsTextField;
    private javax.swing.JPanel MenuPanel;
    private javax.swing.JLabel MultipliersHelpLabel;
    private javax.swing.JTextField MultipliersTextField;
    private javax.swing.JLabel MultipliersTextLabel;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JTextField NameTextField;
    private javax.swing.JLabel OffboardPenaltyLabel;
    private javax.swing.JTextField OffboardPenaltyTextField;
    private javax.swing.JButton RestoreButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JPanel ScoreListDartboardHolderPanel;
    private javax.swing.JLabel ScoreListDartboardLabel;
    private javax.swing.JPanel ScoreListDartboardPanel;
    private javax.swing.JLabel ScoreListLabel;
    private javax.swing.JTextField ScoreTextField1;
    private javax.swing.JTextField ScoreTextField10;
    private javax.swing.JTextField ScoreTextField11;
    private javax.swing.JTextField ScoreTextField12;
    private javax.swing.JTextField ScoreTextField13;
    private javax.swing.JTextField ScoreTextField14;
    private javax.swing.JTextField ScoreTextField15;
    private javax.swing.JTextField ScoreTextField16;
    private javax.swing.JTextField ScoreTextField17;
    private javax.swing.JTextField ScoreTextField18;
    private javax.swing.JTextField ScoreTextField19;
    private javax.swing.JTextField ScoreTextField2;
    private javax.swing.JTextField ScoreTextField20;
    private javax.swing.JTextField ScoreTextField3;
    private javax.swing.JTextField ScoreTextField4;
    private javax.swing.JTextField ScoreTextField5;
    private javax.swing.JTextField ScoreTextField6;
    private javax.swing.JTextField ScoreTextField7;
    private javax.swing.JTextField ScoreTextField8;
    private javax.swing.JTextField ScoreTextField9;
    private javax.swing.JTextField ScoreTextFieldBullseye;
    private javax.swing.JLabel StartingScoreLabel;
    private javax.swing.JTextField StartingScoreTextField;
    private javax.swing.JCheckBox SubtractPointsCheckBox;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    // End of variables declaration//GEN-END:variables
}
